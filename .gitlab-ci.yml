# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
.charts-patterns: &chart-patterns
  - "charts/kubernetes-injector/**"


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script: |
     echo "Compiling the code..."
     echo "Compile complete."
     files_changed="$(git show --pretty="" --name-only)"
     charts_dirs_changed="$(echo "$files_changed" | xargs dirname | grep -o "charts/[^/]*" | sort | uniq || true)"
     num_charts_changed="$(echo "$charts_dirs_changed" | grep -c "charts" || true)"
     num_version_bumps="$(echo "$files_changed" | grep Chart.yaml | xargs git show | grep -c "+version" || true)"
     for i in $charts_dirs_changed
     do 
         num_version_bumps="$(git  show $i/Chart.yaml | grep -c "+version" || true)"
         if [[ "$num_version_bumps"  != "1" ]]; then 
            echo "Version not bumped for $i ! "   
         else 
            yq e '.dependencies[] | select (.repository == "file*").repository | sub("^file://","")' $i/Chart.yaml  | xargs -I % helm dependencies build $i/%
            helm dependencies update $i
         fi 
         echo "Working $i filename $num_version_bumps ..."
     done
     echo "charts_dirs_changed = $charts_dirs_changed"
     echo "num_charts_changed = $num_charts_changed"
     echo "num_version_bumps = $num_version_bumps"
     if [[ "$num_charts_changed" -ne "$num_version_bumps" ]]; then
            # Changes done in charts but version not bumped -> ERROR
            charts_changed_str="$(echo ${charts_dirs_changed[@]})"
            echo "error=Detected changes in charts without version bump in Chart.yaml. Charts changed: ${num_charts_changed} ${charts_changed_str}. Version bumps detected: ${num_version_bumps}"
            echo "result=fail"
     elif [[ "$num_charts_changed" -eq "1" ]]; then
            # Changes done in only one chart -> OK
            chart_name=$(echo "$charts_dirs_changed" | sed "s|charts/||g")
            echo "chart=${chart_name}"
            echo "result=ok"
     else
            # Changes done in more than chart -> FAIL
            charts_changed_str="$(echo ${charts_dirs_changed[@]})"
            echo "error=Changes detected in more than one chart directory: ${charts_changed_str}. The publish process will be stopped. Please create different commits for each chart."
            echo "result=fail"
     fi
  rules:
  - changes: *chart-patterns

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
